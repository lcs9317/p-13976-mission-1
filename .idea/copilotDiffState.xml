<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    kotlin(&quot;jvm&quot;) version &quot;2.1.21&quot;&#10;    id(&quot;org.springframework.boot&quot;) version &quot;3.5.4&quot;&#10;    id(&quot;io.spring.dependency-management&quot;) version &quot;1.1.4&quot;&#10;}&#10;&#10;group = &quot;com.ll&quot;&#10;version = &quot;1.0-SNAPSHOT&quot;&#10;&#10;repositories {&#10;    mavenCentral()&#10;}&#10;&#10;dependencies {&#10;    implementation(&quot;org.springframework.boot:spring-boot-starter-web&quot;)&#10;    implementation(&quot;org.jetbrains.kotlin:kotlin-reflect&quot;)&#10;    implementation(&quot;org.jetbrains.kotlin:kotlin-stdlib-jdk8&quot;)&#10;    testImplementation(&quot;org.springframework.boot:spring-boot-starter-test&quot;)&#10;}&#10;&#10;tasks.test {&#10;    useJUnitPlatform()&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    kotlin(&quot;jvm&quot;) version &quot;2.1.21&quot;&#10;    id(&quot;org.springframework.boot&quot;) version &quot;3.5.4&quot;&#10;    id(&quot;io.spring.dependency-management&quot;) version &quot;1.1.4&quot;&#10;}&#10;&#10;group = &quot;com.ll&quot;&#10;version = &quot;1.0-SNAPSHOT&quot;&#10;&#10;repositories {&#10;    mavenCentral()&#10;}&#10;&#10;dependencies {&#10;    implementation(&quot;org.springframework.boot:spring-boot-starter-web&quot;)&#10;    implementation(&quot;org.jetbrains.kotlin:kotlin-reflect&quot;)&#10;    implementation(&quot;org.jetbrains.kotlin:kotlin-stdlib-jdk8&quot;)&#10;    implementation(&quot;com.fasterxml.jackson.module:jackson-module-kotlin&quot;)&#10;    testImplementation(&quot;org.springframework.boot:spring-boot-starter-test&quot;)&#10;    testImplementation(&quot;com.fasterxml.jackson.module:jackson-module-kotlin&quot;)&#10;}&#10;&#10;tasks.test {&#10;    useJUnitPlatform()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/App.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/App.kt" />
              <option name="originalContent" value="package com.ll.wiseSaying&#10;&#10;import java.util.*&#10;&#10;&#10;class App {&#10;    private val scanner = Scanner(System.`in`)&#10;    private val controller = WiseSayingController(scanner)&#10;&#10;    fun run() {&#10;        printMenu()&#10;&#10;        loop@ while (true) {&#10;            print(&quot;명령) &quot;)&#10;            val cmd = scanner.nextLine().trim()&#10;&#10;            when (cmd) {&#10;                &quot;1&quot;, &quot;등록&quot; -&gt; controller.register()&#10;                &quot;2&quot;, &quot;목록&quot; -&gt; controller.list()&#10;                &quot;3&quot;, &quot;삭제&quot; -&gt; controller.delete()&#10;                &quot;4&quot;, &quot;종료&quot; -&gt; {&#10;                    println(&quot;앱을 종료합니다.&quot;)&#10;                    break@loop&#10;                }&#10;                else -&gt; println(&quot;올바른 명령을 입력해주세요. (등록/1, 목록/2, 삭제/3, 종료/4)&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun printMenu() = println(&#10;        &quot;&quot;&quot;&#10;        명령어를 입력하세요:&#10;        1. 등록  - 명언을 등록합니다.&#10;        2. 목록  - 명언 목록을 보여줍니다.&#10;        3. 삭제  - 번호로 삭제합니다.&#10;        4. 종료  - 앱을 종료합니다.&#10;        &quot;&quot;&quot;.trimIndent()&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.ll.wiseSaying&#10;&#10;import java.util.*&#10;&#10;&#10;class App {&#10;    private val scanner = Scanner(System.`in`)&#10;    private val controller = WiseSayingController(scanner)&#10;&#10;    fun run() {&#10;        printMenu()&#10;&#10;        loop@ while (true) {&#10;            print(&quot;명령) &quot;)&#10;            val cmd = scanner.nextLine().trim()&#10;&#10;            when {&#10;                cmd == &quot;1&quot; || cmd == &quot;등록&quot; -&gt; controller.register()&#10;                cmd == &quot;2&quot; || cmd == &quot;목록&quot; || cmd.startsWith(&quot;목록&quot;) -&gt; controller.list()&#10;                cmd == &quot;3&quot; || cmd.startsWith(&quot;삭제&quot;) -&gt; controller.delete(cmd)&#10;                cmd.startsWith(&quot;수정&quot;) -&gt; controller.modify(cmd)&#10;                cmd == &quot;4&quot; || cmd == &quot;종료&quot; -&gt; {&#10;                    println(&quot;앱을 종료합니다.&quot;)&#10;                    break@loop&#10;                }&#10;                else -&gt; println(&quot;올바른 명령을 입력해주세요. (등록/1, 목록/2, 삭제/3, 수정, 종료/4)&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun printMenu() = println(&#10;        &quot;&quot;&quot;&#10;        명령어를 입력하세요:&#10;        1. 등록  - 명언을 등록합니다.&#10;        2. 목록  - 명언 목록을 보여줍니다.&#10;        3. 삭제  - 번호로 삭제합니다.&#10;        4. 종료  - 앱을 종료합니다.&#10;        &quot;&quot;&quot;.trimIndent()&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/Main.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/Main.kt" />
              <option name="originalContent" value="package com.ll&#10;&#10;import com.ll.domain.controller.WiseSayingController&#10;import org.springframework.boot.autoconfigure.SpringBootApplication&#10;import org.springframework.boot.runApplication&#10;import org.springframework.context.getBean&#10;&#10;@SpringBootApplication&#10;class KotlinExamApplication&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val context = runApplication&lt;KotlinExamApplication&gt;(*args)&#10;    val wiseSayingController = context.getBean&lt;WiseSayingController&gt;()&#10;&#10;    printMenu()&#10;&#10;    while (true) {&#10;        print(&quot;명령) &quot;)&#10;        val command = readLine()?.trim()&#10;&#10;        when (command) {&#10;            &quot;종료&quot; -&gt; {&#10;                println(&quot;앱을 종료합니다.&quot;)&#10;                break&#10;            }&#10;            &quot;등록&quot; -&gt; {&#10;                print(&quot;명언: &quot;)&#10;                val content = readLine().orEmpty()&#10;                print(&quot;작가: &quot;)&#10;                val author = readLine().orEmpty()&#10;                val id = wiseSayingController.register(content, author)&#10;                println(&quot;${id}번 명언이 등록되었습니다.&quot;)&#10;            }&#10;            &quot;목록&quot; -&gt; {&#10;                val list = wiseSayingController.list()&#10;                println(&quot;번호 / 작가 / 명언&quot;)&#10;                println(&quot;----------------------&quot;)&#10;                list.forEach { println(&quot;${it.id} / ${it.author} / ${it.content}&quot;) }&#10;            }&#10;            else -&gt; println(&quot;올바른 명령을 입력해주세요.&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;fun printMenu() {&#10;    println(&quot;명령어를 입력하세요:&quot;)&#10;    println(&quot;1. 등록 - 명언을 등록합니다.&quot;)&#10;    println(&quot;2. 목록 - 명언 목록을 보여줍니다.&quot;)&#10;    println(&quot;3. 종료 - 앱을 종료합니다.&quot;)&#10;}&#10;" />
              <option name="updatedContent" value="package com.ll&#10;&#10;import com.ll.domain.controller.WiseSayingController&#10;import org.springframework.boot.autoconfigure.SpringBootApplication&#10;import org.springframework.boot.runApplication&#10;import org.springframework.context.getBean&#10;&#10;@SpringBootApplication&#10;open class KotlinExamApplication&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    val context = runApplication&lt;KotlinExamApplication&gt;(*args)&#10;    val wiseSayingController = context.getBean(com.ll.domain.controller.WiseSayingController::class.java)&#10;&#10;    printMenu()&#10;&#10;    while (true) {&#10;        print(&quot;명령) &quot;)&#10;        val command = readLine()?.trim()&#10;&#10;        when (command) {&#10;            &quot;종료&quot; -&gt; {&#10;                println(&quot;앱을 종료합니다.&quot;)&#10;                break&#10;            }&#10;            &quot;등록&quot; -&gt; {&#10;                print(&quot;명언: &quot;)&#10;                val content = readLine().orEmpty()&#10;                print(&quot;작가: &quot;)&#10;                val author = readLine().orEmpty()&#10;                val id = wiseSayingController.register(content, author)&#10;                println(&quot;${id}번 명언이 등록되었습니다.&quot;)&#10;            }&#10;            &quot;목록&quot; -&gt; {&#10;                val list = wiseSayingController.list()&#10;                println(&quot;번호 / 작가 / 명언&quot;)&#10;                println(&quot;----------------------&quot;)&#10;                list.forEach { println(&quot;${it.id} / ${it.author} / ${it.content}&quot;) }&#10;            }&#10;            else -&gt; println(&quot;올바른 명령을 입력해주세요.&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;fun printMenu() {&#10;    println(&quot;명령어를 입력하세요:&quot;)&#10;    println(&quot;1. 등록 - 명언을 등록합니다.&quot;)&#10;    println(&quot;2. 목록 - 명언 목록을 보여줍니다.&quot;)&#10;    println(&quot;3. 종료 - 앱을 종료합니다.&quot;)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/domain/controller/WiseSayingController.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/domain/controller/WiseSayingController.kt" />
              <option name="originalContent" value="package com.ll.domain.controller&#10;&#10;import com.ll.domain.entity.WiseSaying&#10;import com.ll.domain.service.WiseSayingService&#10;&#10;class WiseSayingController(&#10;    private val wiseSayingService: WiseSayingService&#10;) {&#10;    fun register(content: String, author: String): Long {&#10;        return wiseSayingService.registerWiseSaying(content, author)&#10;    }&#10;&#10;    fun list(): List&lt;WiseSaying&gt; {&#10;        return wiseSayingService.getAllWiseSayings()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ll.domain.controller&#10;&#10;import com.ll.domain.entity.WiseSaying&#10;import com.ll.domain.service.WiseSayingService&#10;import org.springframework.stereotype.Component&#10;&#10;@Component&#10;class WiseSayingController(&#10;    private val wiseSayingService: WiseSayingService&#10;) {&#10;    fun register(content: String, author: String): Long {&#10;        return wiseSayingService.registerWiseSaying(content, author)&#10;    }&#10;&#10;    fun list(): List&lt;WiseSaying&gt; {&#10;        return wiseSayingService.getAllWiseSayings()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/domain/repository/WiseSayingRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/domain/repository/WiseSayingRepository.kt" />
              <option name="originalContent" value="package com.ll.domain.repository&#10;&#10;import com.ll.domain.entity.WiseSaying&#10;&#10;class WiseSayingRepository {&#10;    var wiseSayings: MutableList&lt;WiseSaying&gt; = mutableListOf()&#10;&#10;    fun save(wiseSaying: WiseSaying) {&#10;        wiseSayings.add(wiseSaying)&#10;    }&#10;&#10;    fun findAll(): List&lt;WiseSaying&gt; {&#10;        return wiseSayings&#10;    }&#10;    fun findById(id: Long): WiseSaying? {&#10;        return wiseSayings.find { it.id == id }&#10;    }&#10;&#10;    fun deleteById(id: Long) {&#10;        wiseSayings.removeIf { it.id == id }&#10;    }&#10;&#10;}" />
              <option name="updatedContent" value="package com.ll.domain.repository&#10;&#10;import com.ll.domain.entity.WiseSaying&#10;import org.springframework.stereotype.Repository&#10;&#10;@Repository&#10;class WiseSayingRepository {&#10;    var wiseSayings: MutableList&lt;WiseSaying&gt; = mutableListOf()&#10;&#10;    fun save(wiseSaying: WiseSaying) {&#10;        wiseSayings.add(wiseSaying)&#10;    }&#10;&#10;    fun findAll(): List&lt;WiseSaying&gt; {&#10;        return wiseSayings&#10;    }&#10;    fun findById(id: Long): WiseSaying? {&#10;        return wiseSayings.find { it.id == id }&#10;    }&#10;&#10;    fun deleteById(id: Long) {&#10;        wiseSayings.removeIf { it.id == id }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/domain/service/WiseSayingService.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/domain/service/WiseSayingService.kt" />
              <option name="originalContent" value="package com.ll.domain.service&#10;&#10;import com.ll.domain.entity.WiseSaying&#10;import com.ll.domain.repository.WiseSayingRepository&#10;&#10;class WiseSayingService {&#10;    private val WiseSayingRepository = WiseSayingRepository()&#10;&#10;    fun registerWiseSaying(content: String, author: String): Long {&#10;        val id = WiseSayingRepository.wiseSayings.size.toLong() + 1&#10;        val wiseSaying = WiseSaying(id, content, author)&#10;        WiseSayingRepository.save(wiseSaying)&#10;        return id&#10;    }&#10;&#10;    fun getAllWiseSayings(): List&lt;WiseSaying&gt; {&#10;        return WiseSayingRepository.findAll()&#10;    }&#10;&#10;}" />
              <option name="updatedContent" value="package com.ll.domain.service&#10;&#10;import com.ll.domain.entity.WiseSaying&#10;import com.ll.domain.repository.WiseSayingRepository&#10;import org.springframework.stereotype.Service&#10;&#10;@Service&#10;class WiseSayingService(&#10;    private val wiseSayingRepository: WiseSayingRepository&#10;) {&#10;    fun registerWiseSaying(content: String, author: String): Long {&#10;        val id = wiseSayingRepository.wiseSayings.size.toLong() + 1&#10;        val wiseSaying = WiseSaying(id, content, author)&#10;        wiseSayingRepository.save(wiseSaying)&#10;        return id&#10;    }&#10;&#10;    fun getAllWiseSayings(): List&lt;WiseSaying&gt; {&#10;        return wiseSayingRepository.findAll()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/rq/Rq.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/rq/Rq.kt" />
              <option name="originalContent" value="package com.ll.wiseSaying.rq&#10;&#10;class Rq(command: String) {&#10;    private val parts: String = command.split(&quot;?&quot;,2)&#10;&#10;&#10;}" />
              <option name="updatedContent" value="package com.ll.wiseSaying.rq&#10;&#10;class Rq(command: String) {&#10;    private val parts: Array&lt;String&gt; = command.split(&quot;?&quot;, 2).toTypedArray()&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/kotlin/domain/controller/WiseSayingControllerTest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/kotlin/domain/controller/WiseSayingControllerTest.kt" />
              <option name="originalContent" value="package com.ll.domain.controller&#10;&#10;import com.ll.domain.dto.RegisterWiseSayingRequest&#10;import com.ll.domain.entity.WiseSaying&#10;import org.junit.jupiter.api.Assertions.assertEquals&#10;import org.junit.jupiter.api.Test&#10;import org.springframework.beans.factory.annotation.Autowired&#10;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc&#10;import org.springframework.boot.test.context.SpringBootTest&#10;import org.springframework.http.MediaType&#10;import org.springframework.test.web.servlet.MockMvc&#10;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders&#10;import org.springframework.test.web.servlet.result.MockMvcResultMatchers&#10;import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper&#10;import org.springframework.transaction.annotation.Transactional&#10;&#10;&#10;@SpringBootTest&#10;@AutoConfigureMockMvc&#10;@Transactional&#10;class WiseSayingControllerTest {&#10;    @Autowired&#10;    lateinit var mockMvc: MockMvc&#10;&#10;    @Test&#10;    fun `명언 등록 API는 id를 반환한다`() {&#10;        val request = RegisterWiseSayingRequest(&quot;테스트 명언&quot;, &quot;테스터&quot;)&#10;        val objectMapper = jacksonObjectMapper()&#10;        val json = objectMapper.writeValueAsString(request)&#10;&#10;        mockMvc.perform(&#10;            MockMvcRequestBuilders.post(&quot;/wise-sayings&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(json)&#10;        ).andExpect(MockMvcResultMatchers.status().isOk)&#10;         .andExpect(MockMvcResultMatchers.content().string(&quot;1&quot;))&#10;    }&#10;&#10;    @Test&#10;    fun `명언 목록 API는 명언 리스트를 반환한다`() {&#10;        // 등록 먼저&#10;        val request = RegisterWiseSayingRequest(&quot;명언1&quot;, &quot;작가1&quot;)&#10;        val objectMapper = jacksonObjectMapper()&#10;        val json = objectMapper.writeValueAsString(request)&#10;        mockMvc.perform(&#10;            MockMvcRequestBuilders.post(&quot;/wise-sayings&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(json)&#10;        )&#10;        // 목록 조회&#10;        mockMvc.perform(&#10;            MockMvcRequestBuilders.get(&quot;/wise-sayings&quot;)&#10;        ).andExpect(MockMvcResultMatchers.status().isOk)&#10;         .andExpect(MockMvcResultMatchers.jsonPath(&quot;$[0].id&quot;).value(1))&#10;         .andExpect(MockMvcResultMatchers.jsonPath(&quot;$[0].content&quot;).value(&quot;명언1&quot;))&#10;         .andExpect(MockMvcResultMatchers.jsonPath(&quot;$[0].author&quot;).value(&quot;작가1&quot;))&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ll.domain.controller&#10;&#10;import com.ll.domain.dto.RegisterWiseSayingRequest&#10;import com.ll.domain.entity.WiseSaying&#10;import org.junit.jupiter.api.Assertions.assertEquals&#10;import org.junit.jupiter.api.Test&#10;import org.springframework.beans.factory.annotation.Autowired&#10;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc&#10;import org.springframework.boot.test.context.SpringBootTest&#10;import org.springframework.http.MediaType&#10;import org.springframework.test.web.servlet.MockMvc&#10;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders&#10;import org.springframework.test.web.servlet.result.MockMvcResultMatchers&#10;import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper&#10;&#10;&#10;@SpringBootTest&#10;@AutoConfigureMockMvc&#10;class WiseSayingControllerTest {&#10;    @Autowired&#10;    lateinit var mockMvc: MockMvc&#10;&#10;    @Test&#10;    fun `명언 등록 API는 id를 반환한다`() {&#10;        val request = RegisterWiseSayingRequest(&quot;테스트 명언&quot;, &quot;테스터&quot;)&#10;        val objectMapper = jacksonObjectMapper()&#10;        val json = objectMapper.writeValueAsString(request)&#10;&#10;        mockMvc.perform(&#10;            MockMvcRequestBuilders.post(&quot;/wise-sayings&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(json)&#10;        ).andExpect(MockMvcResultMatchers.status().isOk)&#10;         .andExpect(MockMvcResultMatchers.content().string(&quot;1&quot;))&#10;    }&#10;&#10;    @Test&#10;    fun `명언 목록 API는 명언 리스트를 반환한다`() {&#10;        // 등록 먼저&#10;        val request = RegisterWiseSayingRequest(&quot;명언1&quot;, &quot;작가1&quot;)&#10;        val objectMapper = jacksonObjectMapper()&#10;        val json = objectMapper.writeValueAsString(request)&#10;        mockMvc.perform(&#10;            MockMvcRequestBuilders.post(&quot;/wise-sayings&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(json)&#10;        )&#10;        // 목록 조회&#10;        mockMvc.perform(&#10;            MockMvcRequestBuilders.get(&quot;/wise-sayings&quot;)&#10;        ).andExpect(MockMvcResultMatchers.status().isOk)&#10;         .andExpect(MockMvcResultMatchers.jsonPath(&quot;$[0].id&quot;).value(1))&#10;         .andExpect(MockMvcResultMatchers.jsonPath(&quot;$[0].content&quot;).value(&quot;명언1&quot;))&#10;         .andExpect(MockMvcResultMatchers.jsonPath(&quot;$[0].author&quot;).value(&quot;작가1&quot;))&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>